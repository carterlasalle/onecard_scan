const express = require('express');
const cors = require('cors');
const path = require('node:path');
const fs = require('node:fs');
const { PKPass } = require('passkit-generator');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const dotenv = require('dotenv');
const sharp = require('sharp'); // Add sharp for image processing

// Load environment variables
dotenv.config();

// Create Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Set up middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Serve static files from dist directory (after build)
app.use(express.static(path.join(__dirname, '../dist')));

// Create temp directories if they don't exist
const tempDir = path.join(__dirname, 'temp');
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir, { recursive: true });
}
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Set up multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadsDir);
  },
  filename: (req, file, cb) => {
    cb(null, `${uuidv4()}-${file.originalname}`);
  }
});

const upload = multer({ storage });

// Helper function to check for certificate files
function checkCertificates() {
  const requiredCerts = [
    path.join(__dirname, 'certificates/wwdr.pem'),
    path.join(__dirname, 'certificates/signerCert.pem'),
    path.join(__dirname, 'certificates/signerKey.pem')
  ];
  
  for (const cert of requiredCerts) {
    if (!fs.existsSync(cert)) {
      console.error(`Missing certificate: ${cert}`);
      return false;
    }
  }
  
  return true;
}

// Helper function to process and resize images
async function processImage(base64Data, outputWidth, outputHeight) {
  try {
    // Convert base64 to buffer
    const imgData = base64Data.replace(/^data:image\/\w+;base64,/, '');
    const buffer = Buffer.from(imgData, 'base64');
    
    // Process with sharp
    const processedBuffer = await sharp(buffer)
      .resize(outputWidth, outputHeight, {
        fit: 'cover',
        position: 'center'
      })
      .toBuffer();
    
    return processedBuffer;
  } catch (error) {
    console.error('Image processing error:', error);
    throw error;
  }
}

// API endpoint to generate a pass
app.post('/api/generate-pass', async (req, res) => {
  try {
    const { name, cardId, year, photo, barcode } = req.body;

    if (!name || !cardId || !year || !photo) {
      return res.status(400).json({ error: 'Missing required card information' });
    }
    
    // Check certificates
    if (!checkCertificates()) {
      return res.status(500).json({ 
        error: 'Certificate files missing',
        details: 'One or more required certificate files are missing. Check the server logs for details.'
      });
    }

    // Configure pass instance with model and certificates
    try {
      // Process images
      const thumbnailBuffer = await processImage(photo, 160, 160);
      const iconBuffer = await processImage(photo, 58, 58);
      const logoBuffer = await processImage(photo, 160, 50);
      
      // Create PKPass instance
      const pass = new PKPass({
        model: path.join(__dirname, 'pass-models/generic-pass'),
        certificates: {
          wwdr: path.join(__dirname, 'certificates/wwdr.pem'),
          signerCert: path.join(__dirname, 'certificates/signerCert.pem'),
          signerKey: path.join(__dirname, 'certificates/signerKey.pem'),
          signerKeyPassphrase: process.env.SIGNER_KEY_PASSPHRASE || ''
        }
      });

      // Set pass data with proper structure
      pass.headerFields = [{
        key: 'school',
        label: 'SCHOOL',
        value: 'WINDWARD'
      }];
      
      pass.primaryFields = [{
        key: 'name',
        label: 'NAME',
        value: name
      }];
      
      pass.secondaryFields = [
        {
          key: 'id',
          label: 'ID',
          value: cardId
        },
        {
          key: 'year',
          label: 'YEAR',
          value: year
        }
      ];
      
      pass.backFields = [
        {
          key: 'about',
          label: 'About This Pass',
          value: 'This pass was generated by OneCard Scan. It provides digital access to your student ID.'
        },
        {
          key: 'terms',
          label: 'Terms and Conditions',
          value: 'This digital pass is for convenience only and may not be accepted in all locations where a physical student ID is required. Always carry your physical ID as a backup.'
        }
      ];
      
      // Set barcode data
      pass.barcodes = [{
        message: barcode || cardId,
        format: 'PKBarcodeFormatPDF417',
        messageEncoding: 'iso-8859-1'
      }];

      // Configure pass visuals
      pass.setOrganizationName('Windward School');
      pass.setDescription('Student ID Card');
      pass.setLogoText('Student ID');
      pass.setForegroundColor('rgb(255, 255, 255)');
      pass.setBackgroundColor('rgb(0, 85, 184)');
      pass.setLabelColor('rgb(255, 255, 255)');
      
      // Add student photo images
      pass.addBuffer('thumbnail.png', thumbnailBuffer);
      pass.addBuffer('icon.png', iconBuffer);
      pass.addBuffer('logo.png', logoBuffer);

      // Generate the pass
      const passBuffer = await pass.generate();

      // Save to temporary file
      const passId = uuidv4();
      const passPath = path.join(tempDir, `${passId}.pkpass`);
      fs.writeFileSync(passPath, passBuffer);

      // Provide download URL
      const passUrl = `/api/download-pass/${passId}`;
      res.json({ success: true, passUrl });
      
    } catch (passError) {
      console.error('PassKit error:', passError);
      return res.status(500).json({ 
        error: 'Failed to generate pass', 
        details: passError.message,
        stack: process.env.NODE_ENV === 'development' ? passError.stack : undefined
      });
    }
  } catch (error) {
    console.error('Error generating pass:', error);
    res.status(500).json({ error: 'Failed to generate pass', details: error.message });
  }
});

// API endpoint to download the generated pass
app.get('/api/download-pass/:passId', (req, res) => {
  const passId = req.params.passId;
  const passPath = path.join(__dirname, 'temp', `${passId}.pkpass`);

  if (!fs.existsSync(passPath)) {
    return res.status(404).json({ error: 'Pass not found' });
  }

  res.setHeader('Content-Type', 'application/vnd.apple.pkpass');
  res.setHeader('Content-Disposition', 'attachment; filename=student_id.pkpass');
  
  // Stream the file
  const fileStream = fs.createReadStream(passPath);
  fileStream.pipe(res);
  
  // Clean up the file after sending (but not immediately, to avoid issues)
  fileStream.on('end', () => {
    setTimeout(() => {
      try {
        if (fs.existsSync(passPath)) {
          fs.unlinkSync(passPath);
        }
      } catch (error) {
        console.error('Error cleaning up temporary pass file:', error);
      }
    }, 1000);
  });
});

// Status endpoint
app.get('/api/status', (req, res) => {
  const certStatus = checkCertificates();
  res.json({ 
    status: 'running',
    certificates: certStatus ? 'valid' : 'missing',
    tempDir: fs.existsSync(tempDir) ? 'exists' : 'missing',
    uploadsDir: fs.existsSync(uploadsDir) ? 'exists' : 'missing'
  });
});

// Serve Vue.js app for any other route
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Certificate status: ${checkCertificates() ? 'OK' : 'MISSING'}`);
});