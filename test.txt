Creating the Source for a Pass
Create the directory structure and add source files and images to define a pass.
Overview

The source for your pass includes all the information the system needs to show it to the user:

    Image files for the icon and other visual elements, such as a logo.

    A pass.json file that contains the strings the system displays on the pass and the metadata that defines the pass.

    Optional localization information.

Create the source in a directory that you use to create the final distributable pass Bundle. For information on building a pass from the source, see Building a Pass.
Create the Directory and add Files for the Pass

First create a directory to hold all the source files. The name of the directory is the name of the final pass file followed by .pass. For example, Lift It Membership.pass is the name of the top-level directory for the source of the Lift It membership pass.

Add the pass.json file that contains the information and metadata for the pass. For more information on the contents of this file, see the top-level Pass object.

The following figure shows the directory structure for a simple pass that’s localized for English and Simplified Chinese:

A file structure diagram that shows the files and directories for an example pass. At the top is a directory called simple.pass. Inside that directory are the icon and background images files at different resolutions and the pass.json file. There are two localization directories, one called en.lproj for the English localization and one called zh-Hans.lproj for Simplified Chinese. Inside each of the localization folders are the image files for the logo and the pass.strings file.
Add the images for the Pass

Customize the look of your pass by using images for a logo and other items. All passes require an icon:

    In notifications, including on the lock screen.

    As the image for an email attachment.

Some types of passes include other types of images, such as a background. For more information, see Pass Design and Creation.
Add Localization to the Pass

Expand your audience by localizing the strings and images of your pass to different languages and regions.

An annotated graphic that shows the English and Simplified Chinese versions of a pass; each pass shows three differences between the passes: a localized logo, localized primary field strings, and a date displayed in regional format.

Add a directory at the top-level source directory of each pass for each localization. The name of the directory identifies the language and an optional region:

[language identifier]-[region identifier].lproj

For example, the name for the French localization directory is fr.lproj, and the name for the Simplified Chinese directory is zh-Hans.lproj. For more information on language identifiers, see Understand the Language Identifier.

Localize an image by adding the location-specific image files to each localization directory. For example, to add the localized versions of the diamond logo shown above, add the English version of the logo@2x.png and logo@3x.png files to the en.lproj folder and the Chinese version of the logo@2x.png and logo@3x.png files to the zh-Hans.lproj folder. Each folder must contain the same number of resolutions for an image.

Note

Adding an image of the same name to the top-level folder of the pass overrides any localized versions. In addition, the localized image of a pass may not update after adding the pass to Wallet.
Localize the Strings

When a user opens a pass, the system localizes displayed strings in two different ways. The system localizes pass fields that contain dates, times, and currencies that use standard formats in the pass.json file. For example, in the pass shown above, the expiration date value is an ISO 8601 date in PassFieldContent:

{
   "dateStyle": "PKDateStyleShort", 
   "isRelative": true, 
   "key": "expires", 
   "label": "ExpiresLabel", 
   "value": "2019-06-26T12:00:00+00:00"
}

The system always displays localized versions of these values, even when your pass doesn’t contain localization folders for the language. For example, the figure below shows a pass that contains localizations for English and Simplified Chinese displayed on a device set to the Arabic language. The system only localizes the date:

An annotated graphic of the pass that shows the date in Arabic script and all the other strings in English.

The system localizes other strings on your pass using a strings file which contains a list of keys and associated localized strings. Add localized strings to your pass in three steps:

    Set the value of a displayed string in pass.json to a key, such as “OfferAmountLabel” for the label of the offer amount field.

    Add a pass.strings file to the localization folder.

    Add a line to each pass.strings file that sets a key you created in pass.json to the localized term.

For example, the following three code snippets show the code to localize the offer label and offer text of the passes shown above to English and to Simplified Chinese.

Set the value of the strings in the PassFields.PrimaryFields object in the pass.json file to the keys you use to show a localized string in the pass.strings files:

...  
   "primaryFields": [
      {
        "key": "offer", 
        "value": "OfferAmount"
        "label": "OfferAmountLabel", 
      }
    ]
...

Set the English strings in en.lproj/pass.strings:

/* English Localization */
/* Offer strings */
"OfferAmount" = "100% off";
"OfferAmountLabel" = "Anything you want!";

Set the Simplified Chinese strings in zh-Hans.lproj/pass.strings:

/* Simplified Chinese Localization */
/* Offer strings */
"OfferAmount" = "100% 折扣";
"OfferAmountLabel" = "尽享所需一切！";

Use UTF-16 encoding for non-ASCII characters.

Article
Building a Pass
Build a distributable pass.
Overview

The pass you distribute to a user is a signed Bundle that contains the JSON description of the pass, images, and optional localizations.

To build a pass, you:

    Create the source files for a pass. To learn more, see Creating the Source for a Pass.

    Create a pass type identifier.

    Generate a signing certificate.

    Create a digital signature for the pass.

    Create the signed bundle.

Create a Pass Type Identifier

You build one or more groups of related passes, such as the tickets for different events. Each group has a unique pass type identifier, a reverse DNS string that identifies your organization, the kind of pass, and the group, such as com.example-company.passes.ticket.event-4631A.

Identify the individual passes in a group by assigning each a serial number. Each combination of pass identifier and serial number is one unique pass. Adding a pass with the same pass identifier and serial number as one that already exists on a users’ device overwrites the old one.

Create your pass type identifier in the Certificates, Identifiers & Profiles area of your Apple Developer account:

    Select Identifiers and then click Add (+).

    On the next screen, choose Pass Type IDs and click Continue.

    Enter a description and the reverse DNS string to create the identifier.

For more information on signing in to your account and creating identifiers, see Developer Account Help.

Set the passTypeIdentifier of Pass in the pass.json file to the identifier. Set the serialNumber key to the unique serial number for that identifier.
Generate a Signing Certificate

Signing a pass requires a signing certificate for the pass type identifier. Before you can generate a signing certificate you need a certificate signing request (CSR). To learn how to generate a CSR, see Create a certificate signing request.

Generate the signing certificate in the Certificates, Identifiers & Profiles area of the Apple Developer portal.

    Select Certificates, and then click Add (+).

    On the next screen, choose Pass Type ID Certificate and click Continue.

    Enter a name for the certificate and select the pass type ID from the dropdown menu.

    Click continue and upload the certificate signing request (CSR).

After uploading the CSR, generate the certificate and download it to the machine used for signing the pass.

For more information on signing into your account and creating signing certificates, see Developer Account Help.
Sign the Pass and Create the Bundle

To sign the pass, follow these steps:

    Generate a manifest of the source files for a pass.

    Write the manifest object to a new file called manifest.json in the top-level directory of the source for the pass.

    Create a PKCS #7 detached signature for the manifest that uses the private key of the pass identifier signing certificate.

    Add the signature to the top level of the pass in a file called signature.

    Zip the resulting directory.

    Change the file extension of the resulting archive from .zip to .pkpass.

Note

Don’t include metadata files that aren’t part of the pass format, such as the .DS_Store file in the manifest or distributable pass.

The manifest is a JSON object that contains a dictionary of the SHA1 hashes for each of the source files for the pass. The dictionary key is the pathname of the file relative to the top level of the pass, and the value is the SHA1 hash. For example, the code below shows the manifest.json file for a pass that’s localized for English and Simplified Chinese:

{
   "icon.png" : "2a1625e1e1b3b38573d086b5ec158f72f11283a0",
   "icon@2x.png" : "7321a3b7f47d1971910db486330c172a720c3e4b",
   "icon@3x.png" : "7321a3b7f47d1971910db486330c172a720c3e4b",
   "pass.json" : "ef3f648e787a16ac49fff2c0daa8615e1fa15df9",
   "strip.png" : "25b737727194b5c7b26a86d57e859a054eada240",
   "en.lproj\/logo.png" : "cff02680b9041b7bf637960f9f2384738c935347",
   "en.lproj\/logo@2x.png" : "0e12af882204c3661fd937f6594c6b5ffc6b8a49",
   "en.lproj\/logo@3x.png" : "1f103c8a07fb979ea33adfbfd031e26305fd616b",
   "en.lproj\/pass.strings" : "aaf7d9598f6a792755be71f492a3523d507bc212",
   "zh-Hans.lproj\/logo.png" : "eca86d8a474ccd33978f6aaf98a564669d45c7ae",
   "zh-Hans.lproj\/logo@2x.png" : "b6556bc2fa795d11262f17cdff04f80350398f5f",
   "zh-Hans.lproj\/logo@3x.png" : "124f8381721b44b2b57bf33e30b8a9a2e0404bce",
   "zh-Hans.lproj\/pass.strings" : "b0b4499ba7369e4cc15bad45c251e7b9bbcad6a4",
}

Test your pass by dropping it onto an iPhone that’s running on Simulator. Wallet shows the add pass dialog if it’s valid.

A graphic that show the add pass sheet on an iPhone 12 running in Simulator.
Common Problems

If your pass doesn’t build correctly, check whether the following are all true:

    The pass.json file contains all the required keys.

    The value of the passTypeIdentifier key in the pass.json file matches the pass type identifier of the signing certificate.

    The value of the teamIdentifier key in the pass.json file matches the Apple Developer account of the signing certificate.

    The machine signing the pass has a copy of the signing certificate.

    The certificate isn’t expired.

    The manifest.json contains all the source files, including those in subdirectories.

    The source contains all required images.

    The images are in the correct format.

    The pass.json and manifest.json files use the correct JSON syntax.

    Strings that require value formats are correct, such as the value and attributedValue keys of PassFieldContent which require an ISO 8601 date.

    The names of localization folders use the correct language and region identifiers.

    Each localization folder contains all localized image files.

    Each localization folder contain the pass.strings file for passes with localized strings.

    The pass.strings files use the correct syntax.

    The keys for localized strings in the pass.json file match those used in the pass.strings files.

    Each pass.strings file contains the same number of localized strings and uses the same keys.
    Distributing and updating a pass
Distribute a pass to your users or update an existing pass.
Overview

There are three ways you can distribute a pass:

    Add a pass from an app or App Clip.

    Provide a download on a web page for one pass or a bundle containing multiple passes.

    Send a pass as an attachment in an email.

In your app or App Clip, add a PKAddPassButton to show that a pass is available. When the user taps the button, show a PKAddPassesViewController for the pass.

On your website, show an Add to Apple Wallet button. Download the pass when the user clicks the button. For more information on displaying the button, see the Add to Apple Wallet Guidelines.

Update a pass by distributing a new version of the pass with the same pass identifier and serial number. For more information on the pass identifier and serial number, see the passTypeIdentifier and serialNumber keys of the Pass object.

You can optionally provide a web service to update the contents of a user’s pass, such as changing the time for an event. For more information about implementing a pass update web service, see Adding a Web Service to Update Passes.
Create a bundle of passes

Provide a bundle of passes to enable your user to download multiple passes at once. To create the pass bundle:

    Create a .zip file containing the .pkpass files for the passes that are part of the bundle.

    Change the extension of the .zip file to .pkpasses.

You can distribute a bundle of passes the same way you distribute a single pass. The MIME type for a bundle of passes is “application/vnd.apple.pkpasses".

Note

You can have up to 10 passes or 150 MB for a bundle of passes.

ass
An object that represents a pass.
iOS 6.0+iPadOS 6.0+watchOS 2.0+

object Pass

Properties
accessibilityURL
string

A URL that links to your accessiblity content, or the venue’s.

This key works only for poster event tickets.
addOnURL
string

A URL that can link to experiences that someone can add to the pass.

This key works only for poster event tickets.
appLaunchURL
string

A URL the system passes to the associated app from associatedStoreIdentifiers during launch.

The app receives this URL in the application(_:didFinishLaunchingWithOptions:) and application(_:open:options:) methods of its app delegate.

This key isn’t supported for watchOS.
associatedStoreIdentifiers
[number]

An array of App Store identifiers for apps associated with the pass. The associated app on a device is the first item in the array that’s compatible with that device.

A link to launch the app is on the back of the pass. If the app isn’t installed, the link opens the App Store.

This key works only for payment passes.

This key isn’t supported for watchOS.
auxiliaryStoreIdentifiers
[number]

An array of additional App Store identifiers for apps associated with the pass. The associated app on a device is the first item in the array that’s compatible with that device.

This key works only for poster event tickets. A link to launch the app is in the event guide of the pass. If the app isn’t installed, the link opens the App Store.

This key isn’t supported for watchOS.
authenticationToken
string

The authentication token to use with the web service in the webServiceURL key.
backgroundColor
string

A background color for the pass, specified as a CSS-style RGB triple, such as rgb(23, 187, 82).
bagPolicyURL
string

A URL that links to the bag policy of the venue for the event that the pass represents.

This key works only for poster event tickets.
barcode
Pass.Barcode

An object that represents a barcode on a pass.

This object is deprecated. Use barcodes instead.
barcodes
[Pass.Barcodes]

An array of objects that represent possible barcodes on a pass. The system uses the first displayable barcode for the device.
beacons
[Pass.Beacons]

An array of objects that represent the identity of Bluetooth Low Energy beacons the system uses to show a relevant pass.
boardingPass
Pass.BoardingPass

An object that contains the information for a boarding pass.
contactVenueEmail
string

The preferred email address to contact the venue, event, or issuer.

This key works only for poster event tickets.
contactVenuePhoneNumber
string

The phone number for contacting the venue, event, or issuer.

This key works only for poster event tickets.
contactVenueWebsite
string

A URL that links to the website of the venue, event, or issuer.

This key works only for poster event tickets.
coupon
Pass.Coupon

An object that contains the information for a coupon.
description
localizable string
(Required)

A short description that iOS accessibility technologies use for a pass.
directionsInformationURL
string

A URL that links to directions for the event.

This key works only for poster event tickets.
eventLogoText
localizable string

The text to display next to the logo on the pass.

This key works only for poster event tickets
eventTicket
Pass.EventTicket

An object that contains the information for an event ticket.
expirationDate
string

The date and time the pass expires. The value needs to be a complete date that includes hours and minutes, and may optionally include seconds.
footerBackgroundColor
string

A background color for the footer of the pass, specified as a CSS-style RGB triple, such as rgb(100, 10, 110).

This key works only for poster event tickets.
foregroundColor
string

A foreground color for the pass, specified as a CSS-style RGB triple, such as rgb(100, 10, 110).
formatVersion
number
(Required)

The version of the file format. The value needs to be 1.
generic
Pass.Generic

An object that contains the information for a generic pass.
groupingIdentifier
string

An identifier the system uses to group related boarding passes or event tickets. Wallet displays passes with the same groupingIdentifier, passTypeIdentifier, and type as a group.

Use this identifier to group passes that are tightly related, such as boarding passes for different connections on the same trip.
labelColor
string

A color for the label text of the pass, specified as a CSS-style RGB triple, such as rgb(100, 10, 110). If you don’t provide a value, the system determines the label color.
locations
[Pass.Locations]

An array of up to 10 objects that represent geographic locations the system uses to show a relevant pass.
logoText
localizable string

The text to display next to the logo on the pass.

This key doesn’t work for poster event tickets.
maxDistance
number

The maximum distance, in meters, from a location in the locations array at which the pass is relevant. The system uses the smaller of this distance or the default distance.
merchandiseURL
string

A URL that links to a site for ordering merchandise for the event that the pass represents.

This key works only for poster event tickets.
nfc
Pass.NFC

An object that contains the information to use for Value-Added Services protocol transactions.
orderFoodURL
string

A URL that links to the food ordering page for the event that the pass represents.

This key works only for poster event tickets.
organizationName
localizable string
(Required)

The name of the organization.
parkingInformationURL
string

A URL that links to parking information for the event that the pass represents.

This key works only for poster event tickets.
passTypeIdentifier
string
(Required)

The pass type identifier that’s registered with Apple. The value needs to be the same as the distribution certificate that signs the pass.
preferredStyleSchemes
[string]

An array of schemes to validate the pass with. The system validates the pass and its contents to ensure they meet the schemes’ requirements, falling back to the designed type if validation fails for all the provided schemes.
purchaseParkingURL
string

A URL that links to a site to purchase parking for the event that the pass represents.

This key works only for poster event tickets.
relevantDate
string

The date and time when the pass becomes relevant, as a W3C timestamp, such as the start time of a movie. The value needs to be a complete date that includes hours and minutes, and may optionally include seconds.

For information about the W3C timestamp format, see Time and Date Formats on the W3C website.

This object is deprecated. Use relevantDates instead.
relevantDates
[Pass.RelevantDates]

An array of objects that represent date intervals that the system uses to show a relevant pass.
sellURL
string

A URL that links to the selling flow for the ticket the pass represents.

This key works only for poster event tickets.
semantics
SemanticTags

An object that contains machine-readable metadata the system uses to offer a pass and suggest related actions. For example, setting Don’t Disturb mode for the duration of a movie.
serialNumber
string
(Required)

An alphanumeric serial number. The combination of the serial number and pass type identifier needs to be unique for each pass.
sharingProhibited
boolean

A Boolean value introduced in iOS 11 that controls whether to show the Share button on the back of a pass. A value of true removes the button. The default value is false. This flag has no effect in earlier versions of iOS, nor does it prevent sharing the pass in some other way.
storeCard
Pass.StoreCard

An object that contains the information for a store card.
suppressStripShine
boolean

A Boolean value that controls whether to display the strip image without a shine effect. The default value is true.
suppressHeaderDarkening
boolean

A Boolean value that controls whether to display the header darkening gradient on poster event tickets. The default value is false.

This key works only for poster event tickets.
teamIdentifier
string
(Required)

The Team ID for the Apple Developer Program account that registered the pass type identifier.
transferURL
string

A URL that links to the transferring flow for the ticket that the pass represents.

This key works only for poster event tickets.
transitInformationURL
string

A URL that links to information about transit options in the area of the event that the pass represents.

This key works only for poster event tickets.
useAutomaticColors
boolean

A Boolean value that controls whether Wallet computes the foreground and label color that the pass uses. The system derives the background color from the background image of the pass.

This key works only for poster event tickets.

This key ignores the values that foregroundColor and labelColor specify.
userInfo
any JSON data

A JSON dictionary that contains any custom information for companion apps. The data doesn’t appear to the user.

For example, a pass for a cafe might include information about the customer’s favorite drink and sandwich in a machine-readable form. The companion app uses the data for placing an order for the usual.
voided
boolean

A Boolean value that indicates that the pass is void, such as a redeemed, one-time-use coupon. The default value is false.
webServiceURL
string

The URL for a web service that you use to update or personalize the pass. The URL can include an optional port number.
Mentioned in
Supporting semantic tags in Wallet passes
Showing a Pass on the Lock Screen
Distributing and updating a pass
Creating the Source for a Pass
Building a Pass
Topics
Setting the pass type
object Pass.BoardingPass
An object that represents the groups of fields that display the information for a boarding pass.
object Pass.Coupon
An object that represents the groups of fields that display the information for a coupon.
object Pass.EventTicket
An object that represents the groups of fields that display the information for an event ticket.
object Pass.Generic
An object that represents the groups of fields that display the information for a generic pass.
Adding content
object PassFields
An object that represents the groups of fields that display information on the front and back of a pass.
object PassFieldContent
An object that represents the information to display in a field on a pass.
Adding system suggestions
Supporting semantic tags in Wallet passes
Enable the system to offer suggestions for actions related to passes by adding machine-readable metadata.
object SemanticTags
An object that contains machine-readable metadata the system uses to offer a pass and suggest related actions.
object SemanticTagType
A compilation of data object types for semantic tags.
Adding barcodes
object Pass.Barcodes
An object that represents a barcode on a pass.
object Pass.Barcode
An object that represents a barcode shown on a pass.
Deprecated
Adding relevance
Showing a Pass on the Lock Screen
Add information to your pass so the system can display it on the Lock Screen at a relevant time and place.
object Pass.Locations
An object that represents a location that the system uses to show a relevant pass.
object Pass.Beacons
An object that represents the identifier of a Bluetooth Low Energy beacon the system uses to show a relevant pass.
object Pass.RelevantDates
An object that represents a date interval that the system uses to show a relevant pass.
Adding near-field communications
object Pass.NFC
An object that represents the near-field communication (NFC) payload the device passes to an Apple Pay terminal.
Adding personalization information
object Pass.StoreCard
An object that represents groups of fields that show the information for a store card.
object Personalize
An object that contains the personalization information for a rewards pass.
Web Service Endpoint
Return a Personalized Pass
Create and sign a personalized pass, and send it to a device.
iOS 10.0+iPadOS 6.0+watchOS 2.0+
URL

POST https://yourpasshost.example.com/v1/passes/{passTypeIdentifier}/{serialNumber}/personalize

Path Parameters
passTypeIdentifier
string
(Required)

The pass type identifier of the pass. This value corresponds to the value of the passTypeIdentifier key of the pass.
serialNumber
string
(Required)

The serial number of the pass. This value corresponds to the serialNumber key of the pass.
HTTP Body
PersonalizationDictionary

An object that contains the personalization information for the pass.
Content-Type: application/json
Response Codes
200
OK

The request is successful and returns a signed personalization token.
Content-Type: application/octet-stream
See Also
Personalized Passes
object PersonalizationDictionary
An object that contains the information you use to personalize a pass.
PersonalizationDictionary
An object that contains the information you use to personalize a pass.
iOS 10.0+iPadOS 6.0+watchOS 2.0+

object PersonalizationDictionary

Properties
personalizationToken
string
(Required)

The personalization token for this request. The server must sign and return the token.
requiredPersonalizationInfo
PersonalizationDictionary.RequiredPersonalizationInfo
(Required)

An object that contains the user-entered information for a personalized pass.
Topics
Reading the User Information
object PersonalizationDictionary.RequiredPersonalizationInfo
An object that contains the user-entered information for a personalized pass.
See Also
Personalized Passes
Return a Personalized Pass
Create and sign a personalized pass, and send it to a device.